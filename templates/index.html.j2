{% extends "base.html" %}

{% block title %}Con-Tribute{% endblock %}

{% block content %}
<div class="min-h-screen bg-github-bg text-github-text" x-data="app">

  <!-- Navigation -->
  <nav class="border-b border-github-border bg-github-surface">
    <div class="container mx-auto px-4 py-4 flex justify-between items-center">
      <h1 class="text-2xl font-bold text-github-text">con-tribute</h1>
      
      <div class="flex items-center space-x-4">
        <!-- Login/logout section -->
        <div class="flex items-center space-x-4" x-show="$store.user.isLoggedIn">
          <span class="text-github-text-secondary" x-text="`welcome, ${$store.user.username}`"></span>
          <a href="/logout" class="text-github-blue hover:underline">logout</a>
        </div>

        <a href="/login" 
           class="bg-github-green text-white px-4 py-2 rounded-md hover:bg-green-600 transition-colors" 
           x-show="!$store.user.isLoggedIn">
          login with github
        </a>
      </div>
    </div>
  </nav>

  <!-- Main content -->
  <div class="container mx-auto px-4 py-8 relative">

    <!-- Floating info button -->
    <button @click="$store.ui.showInfoPopup = true"
            class="absolute top-15 right-0 w-10 h-10 rounded-full bg-github-surface border border-github-border hover:bg-github-text-secondary text-github-text-secondary hover:text-github-text transition-colors flex items-center justify-center shadow-lg"
            title="About this site">
      <span class="text-lg font-semibold">?</span>
    </button>

    <!-- Hero section -->
    <div class="text-center mb-10">
      <h2 class="text-4xl font-light">fuck around with your github contribution graph</h2>
      <p class="text-github-text-secondary text-lg pt-2 pb-10">
        make yourself look 'cracked' for the two people looking at your profile / do silly drawings i dont care
      </p>
    </div>

    <!-- Population controls -->
    <div x-data="populationControls" class="mx-auto">
      <div class="flex items-stretch justify-center gap-3 overflow-x-auto pb-2 mb-8">
        
        <!-- Frequency slider -->
        <div class="bg-github-surface border border-github-border rounded-lg p-4 min-w-[220px]">
          <h3 class="text-sm mb-3 text-github-text-secondary">frequency</h3>
          <input type="range" min="0" max="100" 
                 x-model="options.frequency"
                 class="w-full h-2 bg-github-border rounded-lg appearance-none cursor-pointer mt-4">
          <div class="flex justify-between text-xs text-github-text-secondary mt-1">
            <span>sparse</span>
            <span x-text="`${options.frequency}%`"></span>
            <span>dense</span>
          </div>
        </div>

        <!-- Weekday preference slider -->
        <div class="bg-github-surface border border-github-border rounded-lg p-4 min-w-[220px]">
          <h3 class="text-sm mb-3 text-github-text-secondary">weekday preference</h3>
          <input type="range" min="0" max="100" 
                 x-model="options.weekdayBias"
                 class="w-full h-2 bg-github-border rounded-lg appearance-none cursor-pointer mt-4">
          <div class="flex justify-between text-xs text-github-text-secondary mt-1">
            <span>weekdays</span>
            <span x-text="`${options.weekdayBias}%`"></span>
            <span>weekends</span>
          </div>
        </div>

        <!-- Contribution intensity -->
        <div class="bg-github-surface border border-github-border rounded-lg p-4 min-w-[220px]">
          <h3 class="text-sm mb-3 text-github-text-secondary">contribution intensity</h3>
          <div class="inline-flex rounded-md border border-github-border overflow-hidden mt-2" 
               role="radiogroup" aria-label="intensity">
            <template x-for="level in intensityLevels" :key="level">
              <button type="button"
                      @click="options.intensity = level"
                      :aria-checked="options.intensity === level"
                      class="px-3 py-1.5 text-sm border-l border-github-border first:border-l-0"
                      :class="options.intensity === level ? 
                        'bg-github-blue text-white' : 
                        'bg-github-surface text-github-text-secondary hover:bg-[#1b2330]'"
                      x-text="level">
              </button>
            </template>
          </div>
        </div>

        <!-- Pattern selection -->
        <div class="bg-github-surface border border-github-border rounded-lg p-4 min-w-[220px]">
          <h3 class="text-sm mb-3 text-github-text-secondary">contribution pattern</h3>
          <div class="grid grid-cols-2 gap-2" role="radiogroup" aria-label="pattern">
            <template x-for="pattern in patternTypes" :key="pattern">
              <button type="button"
                      @click="options.pattern = pattern"
                      :aria-checked="options.pattern === pattern"
                      class="px-3 py-1.5 text-sm rounded-full border border-github-border text-center"
                      :class="options.pattern === pattern ? 
                        'bg-github-surface text-white' : 
                        'bg-github-surface text-github-text-secondary hover:bg-[#1b2330]'"
                      x-text="pattern">
              </button>
            </template>
          </div>
        </div>

        <!-- Actions -->
        <div class="bg-github-surface border border-github-border rounded-lg p-4 min-w-[220px] flex flex-col items-stretch">
          <button @click="apply()" 
                  class="text-white border border-[#26a641] hover:bg-[#26a641] px-4 py-2 rounded-md transition-colors">
            apply changes
          </button>
          
          <div class="my-4 border-t border-github-border"></div>
          
          <button @click="$store.graph.clearCurrentYear()" 
                  :disabled="$store.graph.loading"
                  :class="$store.graph.loading ? 'cursor-not-allowed opacity-60' : ''"
                  class="text-white border border-red-600/60 hover:bg-red-600 hover:border-red-600 px-4 py-2 rounded-md transition-colors">
            clear graph
          </button>
        </div>
      </div>
    </div>

    <!-- Graph container -->
    <div x-data="graphContainer" class="w-fit mx-auto mb-8">
      <div class="bg-github-surface border border-github-border rounded-lg p-6">

        <!-- Year navigation and level display -->
        <div class="flex items-center justify-between mb-6">
          <!-- Year navigation -->
          <div class="flex items-center space-x-4">
            <button @click="$store.graph.previousYear()"
                    :disabled="!canGoPrevious"
                    :class="canGoPrevious ? 
                      'text-github-text-secondary hover:text-github-text' : 
                      'text-gray-500 cursor-not-allowed'">
              <i data-lucide="chevron-left"></i>
            </button>  
            <span class="text-xl font-semibold" x-text="$store.graph.currentYear"></span>
            <button @click="$store.graph.nextYear()"
                    :disabled="!canGoNext"
                    :class="canGoNext ? 
                      'text-github-text-secondary hover:text-github-text' : 
                      'text-gray-500 cursor-not-allowed'">
              <i data-lucide="chevron-right"></i>
            </button>
          </div>

          <!-- Level distribution display -->
          <div class="flex items-center justify-between gap-16">
            <template x-for="level in contributionLevels" :key="level">
              <div class="flex items-center space-x-1">
                <div class="w-4 h-4 rounded-sm" :style="`background-color: ${getColor(level)}`"></div>
                <span class="text-xs text-github-text-secondary font-mono" 
                      x-text="getLevelPercentage(level)"></span>
              </div>
            </template>
          </div>

          <!-- Interaction hint -->
          <div class="flex items-center gap-3">
            <span class="text-sm text-github-text-secondary">
              left-click to bring contribution up, right-click to bring it down
            </span>
          </div>
        </div>
        
        <!-- Graph grid -->
        <div x-data="graphGrid" 
             class="flex justify-center p-1 relative" 
             @mouseup="interaction.stopDrag()"
             @mousedown="interaction.startDrag($event, null)"
             @contextmenu.prevent="true">
          
          <div class="flex flex-col">
            <!-- Month labels -->
            <div class="flex items-end ml-4 mb-2">
              <div class="flex-none w-8"></div>
              <div class="flex gap-1.5 pb-1">
                <template x-for="col in (loading ? 53 : weekCount)" :key="`m${col}`">
                  <div class="w-4 text-[12px] text-github-text-secondary whitespace-nowrap">
                    <span x-show="!$store.graph.loading" x-text="getMonthLabel(col-1)"></span>
                    <span x-show="$store.graph.loading" x-text="getLoadingMonthLabel(col-1)"></span>
                  </div>
                </template>
              </div>
            </div>

            <!-- Graph body -->
            <div class="flex">
              <!-- Weekday labels -->
              <div class="flex-none w-8 mr-2">
                <div class="flex flex-col gap-1 pb-3">
                  <template x-for="weekday in weekdays" :key="`lbl${weekday}`">
                    <div class="h-4 flex items-center">
                      <span class="text-xs text-github-text-secondary" 
                            x-text="getWeekdayLabel(weekday)"></span>
                    </div>
                  </template>
                </div>
              </div>

              <!-- Loading skeleton -->
              <div x-show="$store.graph.loading" class="flex flex-col gap-1 pb-3">
                <template x-for="weekday in weekdays" :key="`loading-${weekday}`">
                  <div class="flex gap-1.5">
                    <template x-for="week in 53" :key="`loading-${weekday}-${week}`">
                      <div class="w-4 h-4 rounded-sm bg-[#22272e] loading-cell"></div>
                    </template>
                  </div>
                </template>
              </div>

              <!-- Actual graph -->
              <div x-show="!$store.graph.loading" class="flex flex-col gap-1 pb-3">
                <template x-for="weekday in weekdays" :key="weekday">
                  <div class="flex gap-1.5">
                    <template x-for="(day, dayIndex) in ($store.graph.currentData[weekday] || [])" 
                             :key="`${weekday}-${dayIndex}`">
                      <div class="contribution-day w-4 h-4 rounded-sm transition-all duration-200 ease-out"
                           :class="getCellClasses(day)"
                           :style="`background-color: ${getColor(day.level)}`"
                           @mousedown="interaction.startDrag($event, day)"
                           @mouseenter="interaction.onDragOver(day)"
                           :title="getTooltip(day)">
                      </div>
                    </template>
                  </div>
                </template>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Generation section -->
    <div x-data="generationSection" class="w-fit mx-auto">
      <div class="text-center">
        <div x-show="$store.ui.validationWarning" 
             class="bg-yellow-900/20 border border-yellow-600 rounded-lg p-4 mb-4">
          <p class="text-yellow-200 text-sm" x-text="$store.ui.validationWarning"></p>
        </div>
        
        <button @click="generate()"
                :disabled="!$store.user.isLoggedIn"
                :class="$store.user.isLoggedIn ? 
                  'bg-github-green hover:bg-green-600' : 
                  'bg-gray-600 cursor-not-allowed'"
                class="text-white px-8 py-3 rounded-md font-semibold transition-colors">
          <span x-show="!$store.ui.generating">generate contributions</span>
          <span x-show="$store.ui.generating">generating...</span>
        </button>
        
        <p class="text-github-text-secondary text-sm mt-2" x-show="!$store.user.isLoggedIn">
          login with github to generate contributions
        </p>
      </div>
    </div>
  </div>

  <!-- Info popup modal -->
  <div x-data="infoPopup"
       x-show="$store.ui.showInfoPopup" 
       x-transition:enter="transition ease-out duration-100"
       x-transition:enter-start="opacity-0"
       x-transition:enter-end="opacity-100"
       x-transition:leave="transition ease-in duration-100"
       x-transition:leave-start="opacity-100"
       x-transition:leave-end="opacity-0"
       class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50"
       @click.self="close()">
    
    <div class="bg-github-surface border border-github-border rounded-lg p-8 max-w-2xl mx-4 text-github-text"
         x-transition:enter="transition ease-out duration-100"
         x-transition:enter-start="opacity-0 scale-95"
         x-transition:enter-end="opacity-100 scale-100"
         x-transition:leave="transition ease-in duration-100"
         x-transition:leave-start="opacity-100 scale-100"
         x-transition:leave-end="opacity-0 scale-95">
      
      <div class="flex justify-between items-center">
        <h4 class="text-lg text-github-text font-medium">heads up</h4>
        <button @click="close()" 
                class="text-github-text-secondary hover:text-github-text transition-colors">
          <span class="text-2xl">&times;</span>
        </button>
      </div>
      
      <div class="space-y-4 text-base text-github-text-secondary mt-4">
        <p class="text-sm">
          changes on this site WILL actively reflect on your github page. I DO NOT personally recommend using this to fool employers.
          this site was made on a whim and I don't intend to be put on legal blast because of YOU and your INABILITY to find a JOB.
          I made this cause I had no contributions in all of 2023 and wanted to put a silly drawing there.
        </p>
        
        <div>
          <h4 class="text-github-text font-medium text-lg">how to use</h4>
          <ul class="list-disc list-inside text-sm">
            <li>left-click to bring contribution level up</li>
            <li>right-click to bring contribution level down</li>
            <li>auto-populate the graph w/ the sliders and stuff</li>
            <li>generate the changes if the graph is valid (more on this below). should reflect on github in X minutes</li>
          </ul>
        </div>
        
        <div>
          <h4 class="text-github-text font-medium text-lg">how it works</h4>
          <ul class="text-sm list-disc list-inside">
            <li>you play with the contribution level (color) directly</li>
            <li>contribution counts are computed based on existing commit counts</li>
            <li>github contribution levels are based on contribution count quartiles; some color combinations may therefore be invalid</li>
            <li>computed dummy commits get pushed to a dummy private repo</li>
            <li>just delete the dummy repo to remove the changes if you're unhappy after generation!</li>
          </ul>
        </div>
        
        <div>
          <h4 class="text-github-text font-medium text-lg">legal disclaimer</h4>
          <p class="text-xs">
            This tool is intended solely for personal use and experimentation. It allows users to visualize and simulate GitHub contribution graphs by generating dummy commits in private repositories.
            These simulated contributions are not actual code contributions and do not reflect real-world activity.
            Using this tool to misrepresent your activity to others, including potential employers, is strictly prohibited and may violate GitHub's Terms of Service.
            By using this tool, you agree to use it responsibly and acknowledge that any misuse is at your own risk. :)
          </p>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.loading-cell {
  animation: scale-pulse 2s infinite ease-in-out;
  animation-delay: calc(var(--delay, 0) * 0.1s);
}
</style>

<script>
lucide.createIcons();

document.addEventListener('alpine:init', () => {
  
  // stores
  // user state store injected from flask visa Jinja2
  Alpine.store('user', {
    isLoggedIn: {{ user_state.logged_in | tojson }},
    username: {{ user_state.username | tojson }},
    startYear: {{ user_state['start_date'][:4] | int }},
  });

  // ui state store
  Alpine.store('ui', {
    showInfoPopup: false,
    validationWarning: '', // message to stop generation if invalid graph
    generating: false,
  });

  // graph data and operations store
  Alpine.store('graph', {
    LEVELS: ['NONE', 'FIRST_QUARTILE', 'SECOND_QUARTILE', 'THIRD_QUARTILE', 'FOURTH_QUARTILE'],
    
    // state
    currentYear: {{ end_year }},
    endYear: {{ end_year }},
    loading: false,
    
    // data storage
    originalData: {}, // original data from api
    workingData: {}, // working data for the graph
    levelCounts: {}, // counts of each level
    
    // computed properties
    // current year data
    get currentData() {
      return this.workingData[this.currentYear] || {};
    },
    
    // sum of all contributions in the current year
    get totalContributions() {
      return Object.values(this.levelCounts[this.currentYear] || {})
        .reduce((sum, count) => sum + count, 0);
    },
    
    // methods
    async previousYear() {
      if (this.currentYear <= Alpine.store('user').startYear || this.loading) return;
      
      this.loading = true;
      this.currentYear--;
      await this.ensureDataLoaded(this.currentYear);
      this.loading = false;
    },

    async nextYear() {
      if (this.currentYear >= this.endYear || this.loading) return;
      
      this.loading = true;
      this.currentYear++;
      await this.ensureDataLoaded(this.currentYear);
      this.loading = false;
    },

    // ensure data is loaded for a given year
    // check cache otherwise fetch from api
    async ensureDataLoaded(year) {
      if (this.workingData[year]) return;
      
      try {
        const response = await fetch(`/api/graph/${year}`);
        const data = await response.json();

        if (data.error) {
          console.error('API error:', data.error);
          return;
        }

        this.originalData[year] = data.graph_data;
        this.workingData[year] = JSON.parse(JSON.stringify(data.graph_data));
        this.levelCounts[year] = this.calculateLevelCount(data.graph_data);
      } catch (error) {
        console.error(`Failed to fetch year ${year} data:`, error);
      }
    },

    // calculate the number of contributions for each level
    calculateLevelCount(graphData) {
      const counts = {
        'FIRST_QUARTILE': 0,
        'SECOND_QUARTILE': 0,
        'THIRD_QUARTILE': 0,
        'FOURTH_QUARTILE': 0
      };

      Object.values(graphData).forEach(weekday => {
        weekday.forEach(day => {
          if (day.level !== 'OUT' && day.level !== 'NONE') {
            counts[day.level]++;
          }
        });
      });

      return counts;
    },

    increaseLevel(day) {
      const currentIndex = this.LEVELS.indexOf(day.level);
      if (currentIndex < this.LEVELS.length - 1) {
        if (day.level !== 'NONE') {
          this.levelCounts[this.currentYear][day.level]--;
        }
        
        day.level = this.LEVELS[currentIndex + 1];
        this.levelCounts[this.currentYear][day.level]++;
        this.activateCell(day);
      }
    },

    decreaseLevel(day) {
      // don't allow to decrease og contrib days to zero
      if (day.og && day.level === 'FIRST_QUARTILE') return;
      
      const currentIndex = this.LEVELS.indexOf(day.level);
      if (currentIndex > 0) {
        this.levelCounts[this.currentYear][day.level]--;
        day.level = this.LEVELS[currentIndex - 1];
        
        if (day.level !== 'NONE') {
          this.levelCounts[this.currentYear][day.level]++;
        }
        this.activateCell(day);
      }
    },

    // activate a cell for interaction animation
    activateCell(day) {
      day.activated = true;
      setTimeout(() => { day.activated = false; }, 200);
    },

    // clear current working year data to original data
    clearCurrentYear() {
      this.workingData[this.currentYear] = JSON.parse(JSON.stringify(this.originalData[this.currentYear]));
      this.levelCounts[this.currentYear] = this.calculateLevelCount(this.workingData[this.currentYear]);
    },

    // intialize to current year data from api
    init() {
      const graphData = {{ graph_data | tojson }};
      this.originalData[this.endYear] = JSON.parse(JSON.stringify(graphData));
      this.workingData[this.endYear] = JSON.parse(JSON.stringify(graphData));
      this.levelCounts[this.endYear] = this.calculateLevelCount(graphData);
    }
  });

  // components

  // main component
  Alpine.data('app', () => ({
    init() {
      this.$store.graph.init();
      
      // utlities if dragging from graph to outside
      document.addEventListener('selectstart', (e) => {
        if (this.isDragging) e.preventDefault();
      });

      document.addEventListener('mouseleave', () => {
        this.stopDrag();
      });
    }
  }));

  // pop control component
  Alpine.data('populationControls', () => ({
    options: {
      frequency: 50,
      weekdayBias: 50,
      intensity: 'medium',
      pattern: 'random'
    },
    
    intensityLevels: ['low', 'medium', 'high'],
    patternTypes: ['random', 'streaks', 'consistent', 'bursts'],
    
    apply() {
      // TODO: Implement population logic
      console.log('Applying population options:', this.options);
    }
  }));

  // graph container component
  Alpine.data('graphContainer', () => ({
    colors: {
      'OUT': '#161b22',        
      'NONE': '#22272e',       
      'FIRST_QUARTILE': '#0e4429',
      'SECOND_QUARTILE': '#006d32', 
      'THIRD_QUARTILE': '#26a641',
      'FOURTH_QUARTILE': '#39d353'
    },
    contributionLevels: ['FIRST_QUARTILE', 'SECOND_QUARTILE', 'THIRD_QUARTILE', 'FOURTH_QUARTILE'],
    
    get canGoPrevious() {
      return this.$store.graph.currentYear > this.$store.user.startYear && !this.$store.graph.loading;
    },
    
    get canGoNext() {
      return this.$store.graph.currentYear < this.$store.graph.endYear && !this.$store.graph.loading;
    },
    
    getColor(level) {
      return this.colors[level];
    },
    
    getLevelPercentage(level) {
      const counts = this.$store.graph.levelCounts[this.$store.graph.currentYear] || {};
      const total = Math.max(this.$store.graph.totalContributions, 1);
      return Math.round(((counts[level] || 0) / total) * 100) + '%';
    }
  }));

  // graph grid component with interaction handling
  Alpine.data('graphGrid', () => ({
    weekdays: [0, 1, 2, 3, 4, 5, 6],
    
    get loading() {
      return this.$store.graph.loading;
    },
    
    // drag interaction state
    interaction: {
      isDragging: false,
      dragMode: null,
      
      startDrag(event, day) {
        this.isDragging = true;
        this.dragMode = event.button === 0 ? 'increase' : 'decrease';

        if (day && !this.isDayLocked(day)) {
          if (this.dragMode === 'increase') {
            Alpine.store('graph').increaseLevel(day);
          } else {
            Alpine.store('graph').decreaseLevel(day);
          }
        }
        event.preventDefault();
      },

      onDragOver(day) {
        if (!this.isDragging || this.isDayLocked(day)) return;

        if (this.dragMode === 'increase') {
          Alpine.store('graph').increaseLevel(day);
        } else {
          Alpine.store('graph').decreaseLevel(day);
        }
      },

      stopDrag() {
        this.isDragging = false;
        this.dragMode = null;
      },
      
      isDayLocked(day) {
        if (!day || day.level === 'OUT' || !day.date) return true;
        
        const today = new Date().toISOString().slice(0, 10);
        const isCurrentYear = Alpine.store('graph').currentYear === Alpine.store('graph').endYear;
        
        return isCurrentYear && day.date > today;
      }
    },
    
    get weekCount() {
      const currentData = this.$store.graph.currentData;
      const lengths = this.weekdays.map(w => (currentData[w] || []).length);
      return Math.max(0, ...lengths);
    },
    
    getCellClasses(day) {
      return {
        'opacity-30 cursor-default': day.level === 'OUT',
        'cursor-pointer hover:opacity-80': day.level !== 'OUT' && !this.interaction.isDayLocked(day),
        'cursor-not-allowed opacity-40': this.interaction.isDayLocked(day) && day.level !== 'OUT',
        'scale-110': day.activated,
      };
    },
    
    getTooltip(day) {
      const today = new Date().toISOString().slice(0, 10);
      const isCurrentYear = this.$store.graph.currentYear === this.$store.graph.endYear;
      
      if (isCurrentYear && day.date > today) return 'locked: future date';
      if (day.og && day.level === 'FIRST_QUARTILE') return 'day contains original contributions and cannot be reduced to zero';
      return '';
    },
    
    getWeekdayLabel(weekday) {
      const labels = { 1: 'Mon', 3: 'Wed', 5: 'Fri' };
      return labels[weekday] || '';
    },
    
    // month label helpers
    findDateForColumn(col) {
      if (col < 0) return '';
      const currentData = this.$store.graph.currentData;
      
      for (let w = 0; w < 7; w++) {
        const d = (currentData[w] || [])[col];
        if (d && d.level !== 'OUT' && d.date) return d.date;
      }
      return '';
    },
    
    getMonthLabel(col) {
      const date = this.findDateForColumn(col);
      if (!date) return '';
      
      const month = new Date(date + 'T00:00:00').toLocaleString('en-US', { month: 'short' });
      if (col === 0) return month;
      
      const prevDate = this.findDateForColumn(col - 1);
      const prevMonth = prevDate ? new Date(prevDate + 'T00:00:00').toLocaleString('en-US', { month: 'short' }) : null;
      return month !== prevMonth ? month : '';
    },
    
    getLoadingMonthLabel(col) {
      const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
      const monthIndex = Math.floor(col / 4.3);
      if (monthIndex >= 12) return '';
      if (col === 0 || Math.floor((col - 1) / 4.3) !== monthIndex) {
        return monthNames[monthIndex];
      }
      return '';
    }
  }));

  // generation section component
  Alpine.data('generationSection', () => ({
    async generate() {
      if (!this.validateGraph()) {
        this.$store.ui.validationWarning = 'Please fix contribution level distribution before generating!';
        return;
      }
      
      this.$store.ui.generating = true;
      // TODO: Implement actual generation API call
      
      // Simulate generation delay
      setTimeout(() => {
        this.$store.ui.generating = false;
      }, 2000);
    },
    
    validateGraph() {
      // TODO: Implement proper validation
      return true;
    }
  }));

  // info popup component
  Alpine.data('infoPopup', () => ({
    close() {
      this.$store.ui.showInfoPopup = false;
    }
  }));
});
</script>
{% endblock %}